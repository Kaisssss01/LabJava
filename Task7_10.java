import java.util.Random;

public class Task7_10 {

    public static void main(String[] args) {

        // 1. Определяем размеры матрицы
        int m = 4; // Количество строк, можно менять
        int n = 4; // Количество столбцов, можно менять (должно быть m == n для квадратной матрицы)

        // 2. Создаем матрицу
        double[][] matrix = new double[m][n];

        // 3. Заполняем матрицу случайными вещественными числами от 0.0 до 10.0
        Random random = new Random();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i][j] = random.nextDouble() * 10; // Случайное число от 0.0 до 10.0
            }
        }

        // 4. Выводим исходную матрицу
        System.out.println("Исходная матрица:");
        printMatrix(matrix, m, n);

        // 5. Выполняем циклический сдвиг по часовой стрелке элементов внешнего слоя на один элемент
        cyclicShift(matrix, m, n);

        // 6. Выводим матрицу после сдвига
        System.out.println("\nМатрица после циклического сдвига:");
        printMatrix(matrix, m, n);
    }

    // Функция для выполнения циклического сдвига элементов внешнего слоя
    public static void cyclicShift(double[][] matrix, int m, int n) {

        // 1. Сохраняем верхний левый элемент
        double temp = matrix[0][0];

        // 2. Сдвигаем элементы верхней строки влево (заменяем каждый элемент следующим справа)
        for (int j = 0; j < n - 1; j++) {
            matrix[0][j] = matrix[0][j + 1];
        }

        // 3. Сдвигаем элементы правого столбца вверх
        for (int i = 0; i < m - 1; i++) {
            matrix[i][n - 1] = matrix[i + 1][n - 1];
        }

        // 4. Сдвигаем элементы нижней строки вправо (в обратном порядке, чтобы не потерять значения)
        for (int j = n - 1; j > 0; j--) {
            matrix[m - 1][j] = matrix[m - 1][j - 1];
        }

        // 5. Сдвигаем элементы левого столбца вниз
        for (int i = m - 1; i > 1; i--) {  // Начинаем со второй строки снизу, потому что [0][0] = temp потом
            matrix[i][0] = matrix[i - 1][0];
        }

        // 6. Возвращаем сохраненный элемент в верхний правый угол (на место [1][0])
        matrix[1][0] = temp;
    }

    // Функция для вывода матрицы на экран (чтобы было красиво)
    public static void printMatrix(double[][] matrix, int m, int n) {
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                System.out.print(String.format("%.2f  ", matrix[i][j])); // Форматируем вывод до двух знаков после запятой
            }
            System.out.println(); // Переходим на новую строку после каждой строки матрицы
        }
    }
}